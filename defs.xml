<?xml version="1.0" ?>
<!--
  Copyright (c) 1990-2012 kopiRight Managed Solutions GmbH
  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License version 2
  as published by the Free Software Foundation.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
  $Id$
-->

<!--=====================================================================
    Global definitions
	==================================================================-->

<project default="init">
  
  
  <!-- ================================= 
       DEFINITIONS              
       ================================= -->
  <property name="release" value="&quot;Version 1.0 released 20 February 2012&quot;" />
  
  <property environment="env" />
  <property name="classroot" value="${env.CLASSROOT}" />
  <property name="extdirs" value="${topdir}/lib" />
  
  <path id="classpath">
    <pathelement path="${env.CLASSPATH}" />
  </path>
  
  <presetdef name="java.def">
    <java classpath="classpath" fork="yes">
      <jvmarg line="-Djava.ext.dirs=${extdirs}" />
    </java>
  </presetdef>
  
  <presetdef name="javac.def">
    <javac srcdir="${src}" destdir="${classroot}" classpathref="classpath" includes="${javafiles}" includeAntRuntime="no" extdirs="${extdirs}">
      <compilerarg line="-encoding utf-8" />
    </javac>
  </presetdef>
  
  <presetdef name="scomp.def">
    <java.def classname="org.apache.xmlbeans.impl.tool.SchemaCompiler">
      <arg line="-d ${classroot}"/>
      <arg line="-srconly"/>
    </java.def>
  </presetdef>
  
  <target name="init" description="  Inisialize the building ">
    <tstamp />
  </target>
  
  <!-- ================================= 
       BUILD              
       ================================= -->
  <target name="build" depends="scomp.build, dir.build, leaf.build, copy.properties" />
  <target name="dir.build" if="node">
    <antcall target="node.build">
      <param name="target" value="build" />
    </antcall>
  </target>
  <target name="leaf.build" unless="node" depends="init" if="javafiles">
    <antcall target="classes" />
  </target>
  <target name="copy.properties" unless="node" if="properties">
    <antcall target="properties" />
  </target>
  <target name="scomp.build" unless="node" if="xsdfiles" >
    <antcall target="scomp" />
  </target>
  
  <!-- ================================= 
       BUILD CLASSFILES
       ================================= -->
  <target name="classes">
    <javac.def />
  </target>
  
  <!-- ================================= 
       COPY PROPERTIES
       ================================= -->
  <target name="properties">
    <copy todir="${classroot}/${package}" verbose="true">
      <fileset dir="." includes="${properties}" />
    </copy>
  </target>
  
  <!-- ================================= 
       XSD ==> JAVA
       ================================= -->
  <target name="scomp">
    <scomp.def>
      <arg line="-src ${topdir}/src ${xsdfiles} ${xsdconfig}"/>
    </scomp.def>
  </target>
  
  <!-- ================================= 
       CLEAN SOURCE DIRECTORY
       ================================= -->
  <target name="clean">
    <delete verbose="true">
      <fileset dir="." includes="**/*~,**/TAGS" />
    </delete>
  </target>
  
  <!-- ================================= 
       CLEAN CLASSFILES
       ================================= -->
  <target name="clean-classes" depends="node-clean-classes, leaf-clean-classes" />
  <target name="node-clean-classes" if="node">
    <antcall target="node.build">
      <param name="target" value="clean-classes" />
    </antcall>
  </target>
  <target name="leaf-clean-classes" unless="node" if="package" >
    <delete verbose="true">
      <fileset dir="${classroot}/${package}" includes="*.class *.properties *.xsl" />
    </delete>
  </target>
  
  <!-- ================================= 
       MAKE JAVADOC DIRECTORIES
       ================================= -->
  <target name="javadocsrcs" depends="node-javadocsrcs, leaf-javadocsrcs" />
  <target name="node-javadocsrcs" if="node">
    <antcall target="node.build">
      <param name="target" value="javadocsrcs" />
    </antcall>
  </target>
  <target name="leaf-javadocsrcs" unless="node" if="package">
    <copy todir="${javadocroot}/source/${package}">
      <fileset dir="${src}" includes="${javafiles}" />
    </copy>
    <touch>
      <fileset dir="${javadocroot}/packages" includes="${package.name}" />
    </touch>
  </target>
  
</project>
